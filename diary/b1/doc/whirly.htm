 <!DOCTYPE html>
 <html><head>
  <!-- doctype for html 4 is only to satisfy IE -->
  
  <meta name="copyright" content="2011-2012 (c) Konstantin Kirillov">
  <meta name="description" content="Board Puzzle Framework, Whirly"> 
  <meta name="keywords" content="whirly, board game, puzzle game, on line game, game development, educational game, sokoban"> 

  <title>Whirly. Draft.</title>

	<link rel="stylesheet" href="css/whirly.css">

	<script type="text/javascript" src="../tp/lib/jquery-1.7.js"></script>
	<script type="text/javascript" src="../tp/bind_events.js"></script>
	<script type="text/javascript" src="../tp/core.js"></script>
	<script type="text/javascript" src="../tp/core_no_jquery.js"></script>
	<script type="text/javascript" src="../tp/core2_no_jquery.js"></script>
	<script type="text/javascript" >$.fn.tp$.core.reset_path_from_land_to_app_root('..');</script>
	<script type="text/javascript" src="../tp/gui.js"></script>
	<script type="text/javascript" src="../tp/gui_no_jq.js"></script>
	<script type="text/javascript" src="../tp/form.js"></script>

	<!-- :: must be before boardspirator scripts: -->
	<script type="text/javascript" src="../core/config/core.js"></script>
	<script type="text/javascript" src="../core/config/gui.js"></script>
	<script type="text/javascript" src="../core/config/templates.js"></script>
	<script type="text/javascript" src="../core/config/description.js"></script>
	<script type="text/javascript" src="../core/config/spawner.js"></script>


	<script type="text/javascript" src="../core/entry.js"></script>
	<script type="text/javascript" src="js/macrify.js"></script>




</head><body><div style="color:#666666; white-space:pre; font-family:monospace;  visibility:hidden;">

This page won't display if no JavaScript language enabled in your browser.
To display a this page, turn JavaScript on.

</div>

<div style="white-space:pre; font-family:monospace; visibility:hidden;">
<span style="visibility:hidden;">This token, #@title@#   , is a necessary flag to unhide this page.</span>
<pre>
<h1>Draft</h1>
<h1><a href="../">Whirly ..</a></h1>
		.. is a generalization of Sokoban game,
		.. is a root for derivation any #@WebSiteWithTitle@# game,
		.. such a game is defined by rules, map, and objective:


	<b>Map</b> ..

		.. is a set of units which are cubes in 3D space. 

		Maps have a flat index: location of each unit is defined by x,y planar
		coordinates of the unit. Units can stack on each other, like wall on ground,
		target on ground, box on target, or hero on wall, ...

		Units have attributes: breed, activity, and motive.
		For example, in Sokoban, breeds are boxes, walls, grounds, ...

		Activity attribute can be active, passive, or static.
		Active unit is an unit which can moved by user's action. For example, hero in Sokoban.
		Passive unit is an unit which can be moved as a result of interaction. Like box in Sokoban.
		Active and passive units called dynamic.
		There can be only one dynamic unit in map's cell unit stack and it can be only on top of the stack.

		Motive can be a baton or goal. Motives used to define objective, like delivering baton-boxes to goals in Sokoban.




	<b>Breeds</b>

		Breeds have additinal attribute - color. In other words breed is a couple (race, color).
		Races are heros, walls, boxes, targets, grounds.
		
		<a href="../core/def/games/base_game.js">Implemented races are</a>:
			
			hero,
			box,
			target,
			htarget,
			wall,
			ground
			
		Colors are: 0, 1, 2, 3, ...  denoted as x, a, b, c, d, ... 

		0 - "colorless" color, 1 - blue, 2 - green, 3 - red, ...
		"Colorless color" often called black, grey, or white.

		For example, hero_x is colorless hero, box_a - blue box, ...

		There is only one race of active units, hero.


<a name="interactions"></a>

	<b>Rules</b> ..

		.. is an interaction matrix - matrix of available interactions between breeds:
		
			push  - acting unit can push neighbour unit, actee, like in Sokoban,
			pull  - acting unit pulls neighbour,
			swap  - acting unit swaps with neighbour,
			leap  - neigbour leaps over actor,
			jump  - actor jumps over units,
			...

		Rules have attributes: deepness and flockness.


		<b>Deepness</b> ..

			.. is a parameter of interaction, DEEPNESS_LIMIT. 
			It defines how far the inital hero's action can propagate through its neighbours.
			For examle, pushed box, can push second box if second box is on its way. If second box cannot push any other box, this means
			that deepness is 2. If 3 boxes can be pushed at once, deepness is 3. #@Sokoban@# is a game with deepness 1.

		<b>Flockness</b> ..

			.. is a parameter of interaction, herd_sense, which natural number n &gt; = 0 ( 0 stands for no-herd-effect ).
			Flocked interaction involves neighbours. This means if neighbour touched moved unit before move began,
			then this neighbour will do the same move if no obstacles prevent this.



	<b>Objective</b> ..

		.. of the game is to "fill" goals with color-matching-batons:
		Precisely: if number of targets less than number of batons, then deliver color-matching batons to all targets.
		Otherwise: deliver all batons to color-matching targets.





<a name="deriving"></a>

D e r i v i n g    f r o m    W h i r l y

	Example: <a href="../def/albums/standalone/collections/default/sokoleap_demo.txt">simplest cfile</a> and <a href="../?asingle&curl=//def/albums/standalone/collections/default/sokoleap_demo.txt">its play</a>.
	Example: <a href="../def/albums/standalone/collections/default/leappush_demo.txt">simple cfile with game and subgame</a> and <a href="../?asingle&curl=//def/albums/standalone/collections/default/leappush_demo.txt">its play</a>.
	Example: <a href="../def/albums/ghostjump/collections/default/ghostjump_demo.txt">simple cfile</a> and <a href="../?asingle&curl=//def/albums/ghostjump/collections/default/ghostjump_demo.txt">its play</a>.
	Example: <a href="../def/albums/standalone/collections/default/jumppush_demo.txt">simple cfile jumppush_demo</a> and <a href="../?asingle&curl=//def/albums/standalone/collections/default/jumppush_demo.txt">its play</a>.
	Example: <a href="../def/albums/bumpytargets/collections/default/maps.txt">cfile</a> and its play: #@Bumpy Targets@#.

	Example, core games: <a href="../def/games.json.txt">definition seeds</a> bundled with #@title@#.

	These game-properties may justify derivation (subclassing) a game:

		credits. 
			Some Whirly parameters subclass to a game which is already invented and has a name.
			Example: Sokoban.

		dresses.
			Example. Rules of Subgame can be the same as of parent, but expected class of maps
					can be narrower and expect special dresses like Sokoban game expect monochrome maps.

		Solver simplilfications. - going to be implemented.
			Narrowed maps may allow simplifications of solver. (Like detecting dead locks in Sokoban maps.)

		interact and unconditional-behavior
			This is rules. Certainly, game must be subclassed if rules changed.

		Repeatedly, rules is not a final judge to consider a separate game definition.

	This should be a topic of itself ...
	Deriving dresses: <a href="../core/def/proc/derive.js">//.\\	collects 4 dresses from </a>

	Unconditional-behavior is game.cols[cname].pass property. Its range is true or false.
		For example, it is true for targets by default.
	game.interact is interaction matrix. The range is <a href="#interactions">these interactions.</a>



<a name="restrictions"></a>

	Restrictions for Custom-Derived Games

		1. Parent and child games must have:

			herd_sense = 0 
			DEEPNESS_LIMIT = 1

			Subclassing to arbitrary DEEPNESS_LIMIT is safe only when interactions 

				( hero_..., box_... ) are push, leap, jump, and
				( box_...,  box_... ) are push.

		2. Setting interaction matrix for new game must allow play-sessions which
		   create postions violating condition
		   "one_dynamic_unit_on_top : true" described here: <a href="../core/def/games/base_game.js">//\\ APPLICATION ASSUMPTIONS</a>

		However, core games or games in readme-examples must work unrestrictedly.

		In particular, this unfortunately means you cannot derive from Flocks or from Colortrain.

		These restriction cased by incomplete implementation of Whirly concept.
		More software development is required to implement concept in full.




	<b>Color-Match-Games</b>

		.. are such games where rules do not depend on pair of colors,
		but depend on outcome of their colors match and races.
		If one of units is colorless or units have the same color, then units are "color-matching".
		Otherwise, they are not color-matching. (This is a match based on "wearing"
		filter-glasses with own color.)
		Not all Whirly games are "Color-Match-Games". 
		This term is only for classification. There is no "Color-Match" property to control application
		behavior.



<a name="dualgames"></a>

D u a l   G a m e s

	Two games G, H called co-games if they have equal set of legal positions and
			
		1. for each move a - b in G, there exists move b - a in H and vice versa,
		2. there is one-to-one correspondence g |-&gt; h between actions g, h such
		   h results in co-move of g.

	Examples: 
		#@Sokoban@# and coSokoban. #@PullPush@# and #@Co-PullPush@#: <!-- #@Pull-Swap-Push@# and #@Co-Pull-Swap-Push@#. -->
			pull and push, left-move and right-move are co-actions.
			Path uullURdl and ruRUrrdd are copaths.

	Copath of solution is a solution of cogame. Finding longest departure from given position in co-game
	helps to construct a map leading to given position in direct game.
	
	#@Doubleban@#, #@Colortrain@#, and #@Monkeyban@# have no implemented co-games.



M i x i n g    m a p s

	Whirly can convert maps of one game to play them in other game for two cases:
		#@Sokoban@# --&gt; #@PullPush@#: <a href="../?akey=pullpush&collection_ix=1">Modified map</a> and
		#@Sokoban@# --&gt; #@Monkeyban@#: <a href="../?akey=monkeyban&collection_ix=1">Modified map</a>
		In such transformation, unit's breed may be changed; however, such transformations do not necessarily result in 
		interesting games.

	(See settings of collection property sugar.do_colorize_randomly.)





					

<a name="extending"></a>

E x t e n d i n g    W h i r l y ..

	.. means adding new type of interactions to interaction matrix.
	This requires reprogramming of scode.
	In simple cases like "push", "pull", "jump", ...,  this job is done in sections
	<a href="../core/interaction.js">///\\\ push,  ///\\\ pull,   ///\\\ jump, ...</a>
	




<a name="variants"></a>

<a href="whirly_and_sokoban.htm">W h i r l y     a n d     S o k o b a n     V a r i a n t s</a>


#@WebSiteWithTitle@#:

Version:	#@version@#
Date:		#@date@#
Copyright:	#@copyright@#
EMail:		#@email@#



</pre></div></body></html>


