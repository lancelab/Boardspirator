<!DOCTYPE html>
<html><head>
  
  <meta http-equiv="Content-Type"	content="text/html; charset=UTF-8">
  <meta name="copyright" content="2011 (c) Konstantin Kirillov">
  <meta name="description" content="Board Puzzle Framework"> 
  <meta name="keywords" content="board puzzle, puzzle game, on line game, game development, educational game, sokoban"> 

  <title>Framework</title>

	<script type="text/javascript" >window.tp$ = window.tp$ || {}; window.tp$.reset_path_from_land_to_app_root = '..' ;</script>
	<script type="text/javascript" src="../prod/app.js""></script>

	<script type="text/javascript" >
		$.fn.tp$.gio.session.init.entry=function(){
			$.fn.tp$.core.rebuild_readme_html($.fn.tp$.gio.description);
		};
	</script>
	<style media="screen" rel="stylesheet" type="text/css">
		body		{	color : #BBBBBB; font-size:12px; padding-left:15px; }
		a			{	
						text-decoration:none; 
						border:none; 
					}
		a:link		{	
						color:#9999FF;
					}
		a:visited	{	
						color:#FF00FF;
					}
		a:hover	{	
						color:#BBFFBB;
					}
	</style>


</head><body>

<div style="visibility:hidden;"><pre>


<h1><a href="../index.htm">#@title@#</a></h1>


	1. Before reading this readme, it should be autogenerated.
	   To refresh engine for documentation, do cd and run finalize_package.sh:

			cd .../play/deployer
			$ ./finalize_package.sh 
			read this readme by landing on doc/app_developer_readme.htm 

	2. Download: git clone git@github.com:lancelab/Boardspirator.git
	   or download as zip file.

	3. Land browser on .../play/index_prod.htm or .../play/index_dev.htm
	   Perhaps only FireFox will allow to do this.
	   For "strict browsers" put folder play under locally runnig web server like Apache and run as
	   http://localhost..../play/index...
	   


O v e r v i e w

	This package is strictly JavaScript. Its working site is whirlio.com.
	Its twin database project, boardspirator.com, is not yet working.

	It is "extreme" JavaScript because:
		whith some minor exceptions
			no CSS files are used,
			no CSS id's are used,
			no HTML markup used,
			no canvases are used,
			no image files used in controls.
			it is HTML 4.01,
			all is generated by JS, ( even triangles on scroll buttons. ),
			it uses jQuery for events, tiles, positioning, and ajax.

		The bulk of the package is vanilla JS.
		Most of the data downloaded as configuration files json or jwon.

		User is allowed to inherit and instantiate games outside of JS code, by using text files, "gamions".


	Since version 1.201 above style changes, some canvas added, probably some key HTML fragments like login or ads
	will be written as in-line HTML.






</pre>
#@full_description_table@#
<pre>




S o f t w a r e   O v e r v i e w


	#@title@# is a part of <a href="../tp/">tp-package</a>.
	#@title@# is jQuery subplugin: jQuery.fn.tp$.gio with little use of window.tp$ functions.
	So, <a href="../tp/readme.htm#features">tp's readme and coding conventions </a> are applicable to #@title@#.
	There are only three global variables window.jQuery, window.$, window.tp$.
	In development version, there is also a shortcut to console.log: window.cccc.


	In contrary to tp, #@title@#
	   ... uses images, which are used only in game boards,
	   ... uses css-ids in ads in some web pages.


	Here are #@title@# source code files:
		application: local: <a href="../core">../core</a> and web: <a href="project_files.htm#did_core">project_files.htm#did_core</a>,
		tp: local: <a href="../tp">../tp</a> and web: <a href="project_files.htm#did_tp">project_files.htm#did_tp</a>


	Usage readme is here: <a href="guest_readme.htm">guest_readme.htm</a>.
	Application Design Concepts is here: <a href="app_design_concepts.htm">app_design_concepts.htm</a>



	Play folder tree:
		core         - core source code
		def          - definitiions: games, albums, skins, ...
		tp           - generic JS libraries
		prod         - production script. Compiled from development part.
		deployer     - Ruby script which deploys application from dev. version to production.
		google_apps  - have nothing to do with application. Ignored if disabled in configuration.



	
	H o w    t o   r u n   o r    t o    d e b u g 

	  Adding ...&debug parameter to URL-query enables debug mode:
	  <a href="../index_dev.htm?debug">index_dev.htm&debug</a>.




	M a i n t e n a n c e

		Keep browser detection code updated in tp.$core.



	C o d i n g   c o n v e n t i o n s

		Attempt made to hold following convensions:

			1. No css class attribute ever used except one case,
		 	   class="dontload_external" in derive.js

			2. No css id attribute ever used except for debug when id = "...._debug" and
			   for optional debug console which has id.

		
	

A p p l i c a t i o n    A r c h i t e c t u r e .   D r a f t

	Finally functioned at run-time album object is like:

		album
			game
			dresses
			collections
					collection
						maps
							map
								board
								rounds
									round
										playpaths
								dresses
									merged dresses from parent album and from map-script

		Front page captions reflect this tree.
		When user toggles captions from from game to game, then album-collection-map-round is preserved.


	Execution steps are: 
		Load
			phase 1
			document-header-time-startup
						scripts inserted into index.htm are executed
						they prepare
								main methods,
								game definition hierachy,
								event handlers,
								call google analytics
							
			phase 2 -
			window.onload-time-startup
						executes on window.onload event,
							gio.session.init.entry();
								finalizes base definitions: gdef.procs.spawn_base_game_and_dress();
								other tasks: game def. load, albums load, ...
								...
								picks up default game or and loads its default collection from data sources,
								if all collections are failed, default map is displayed
								ggi.control_events();
								ggi.step_events();

		Play
			phase 3
			execution - user plays, creates maps, runs solver
			user-time-initializations
						user selects different collection or game and its data loads
						user creates maps


		Map's script validated in two places.
			First, in play/def/map_format modules - syntax validation.
			Second, in normalize_map() function - logical validation.
			Maps state is kept in map.load. States are:
				map.load	= 'parsed' - passed syntax validation
							= 'invalid'
							= 'finalized' - passed both validations and supplied
											borad, rounds, and all necessary properties for run-time. 

		If even single map in collection is failed validation, then all collection is invalid.
		Valid collection has property collection.maps_loaded ='success'.





D i a r y

	is a collection of step by step versions.
	They are stand-alone snapshots of application at specific time.


	1. It is good to have backup versions when current version is
	   overengineered and one can fork from earlier ...
	2. Diary is a storage of abandoned ideas. Not every good idea can find its way to a final.

	For example, version 49 does not use css and images for dynamic "beautified" select box
	control. Can be a base for future browsers, with good CSS3 support.

	For example, in version 34, /var/www/bgame/gio/diary/34/games/sokoban/config.js
	has clear layout for tiles_map. This is a basic internal format for map
	which is used at least till verions 53, but it is not documented and abandoned later.




Thank you for your interest to Bs.





</pre>
		<span style="visibility:hidden;">
			When JS finds this token, #@title@#   , then JS
			will make this div visible.
		</span>

<!-- alignment of this div is shifted to the left -->	
</div>

	<div style="color:#666666; white-space:pre; font-family:monospace;">
		This page won't display if no JavaScript language enabled in your browser.
		To display this page, turn JavaScript on.
	</div>

	<script	type="text/javascript">
		jQuery.fn.tp$.gio.config.google_apps.insert_ad_div_with_script();
	</script>


</body></html>

