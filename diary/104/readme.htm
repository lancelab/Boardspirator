 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

 <html><head>
  <!-- doctype for html 4 is only to satisfy IE -->
  
  <meta name="copyright" content="2011 (c) Konstantin Kirillov">
  <meta name="description" content="Board Puzzle Framework"> 
  <meta name="keywords" content="board game, puzzle game, on line game, game development, educational game, sokoban"> 

  <title>Framework</title>
	<script type="text/javascript" src="tp/lib/jquery-1.7.js"></script>
	<script type="text/javascript" src="tp/bind_events.js"></script>
	<script type="text/javascript" src="tp/core.js"></script>
	<script type="text/javascript" src="tp/core_no_jquery.js"></script>
	<script type="text/javascript" src="tp/gui.js"></script>
	<script type="text/javascript" src="tp/form.js"></script>

	<!-- ** must be before others in gio: -->
	<script type="text/javascript" src="core/config.js"></script>
	<script type="text/javascript" src="core/config_gui.js"></script>

	<script type="text/javascript" src="core/entry.js"></script>

	<script type="text/javascript" >
		$.fn.tp$.gio.session.init.entry=function(){
			$.fn.tp$.core.rebuild_readme_html($.fn.tp$.gio.Description);
		};
	</script>

</head><body><div style="color:#666666; white-space:pre; font-family:monospace;">

Readme won't display if no JavaScript language enabled in your browser.
To display a readme, turn JavaScript on.

</div>


<div style="white-space:pre; font-family:monospace; visibility:hidden;">

You should run this readme from play/readme.htm

<a href="index.htm">#@Title@#</a> is a #@Description@# and is jQuery subplugin tp$.gio.
In other words, it is wrapped into a <a href="tp/readme.htm">jQuery plugin, tp</a>.
The files are spread via <a href=".">directory tree</a>, but can be assembled in one file.

Version:				#@Version@#
Date:					#@Date@#
License:				#@License@#
Copyright:				#@Copyright@#
Language:				#@Language@#
System Requirements:	#@SystemRequirements@#
WebSite:				<a href="http://#@WebSite@#">#@WebSite@#</a>
Contact:				#@Contact@#




O v e r v i e w


This platform helps to derive board puzzle Games.

Game definitions can be derived from one BaseGame definition.
When Game definition (GD) is instantiated by applying board Map to it,
then instance becomes a Game which is played by final user in Web browser.

Collection is a set of Maps.
Album is a set of collections.

GD comprised of two parts: rules and dress. Rules are mathematical part
of the definition. They cannot be copyrighted; however, contributer expects credit for it.

Dress is how game looks. Dress includes images which are called "Skin" here.
Dress, Albums, Collections as piece of art can be copyrighted. 

#@Title@# inclues prebuilt set of Games and Albums. User can craft own maps via browser's editor.





S o f t w a r e   O v e r v i e w

<a href="tp/readme.htm#features">These features and philosophy of tp</a> are also true for #@Title@#.
   ... except images, which are used only in game boards,
   ... except css-ids in ads in some web pages

This application is inserted into ROR project tree when running id db-support mode.
ROR tree is out of scope of this readme.


Plugin folder tree structure.
	core         - core source code
	def          - definitiions: games, albums, skins, ...
	tp           - generic JS libraries
	Folder/file names follow project semantics.
	
How to run or to debug: 
  URL startup parameters example:
	index.htm?game_key=colortrain&debug which will run game colortrain in debug mode
  Entry points:
	<a href="index.htm">this link</a> which calls <a href="lib/entry.js">entry.js</a> ...


Advantages:
  no images used in controls - simple
  no css files, all settings are dynamic


Maintenance:
	Keep browser detection code updated in tp.$core.


Functionality:
	New Games can be coded and attached from games/ folder
	Collections of maps can be shared between games and are in collections/ folder.


Coding style:

	Scope of this comment ends at first empty line, "y" is covered, "z" is not:
	// ** Comment
	var x = 1;
	var y = 2;

	var z = 3;

	Scope of this comment is just one line:
	// * Comment.

	Variables w, ww, www, like "var w" are short-scope local work variables.
	Their meaning is expected to be reset after few lines.



Architecture of the Program:

	Finally functioned at run-time album objec is like:
		album
			game
			dresses
			bundle
				collections
					collection
						maps
							map
								board
								rounds
									round
										playpaths
								dresses
									merged dresses from parent album and from map-script

		Front page captions reflect this tree.
		When user toggles captions from from game to game, then album-collection-map-round is preserved.


	Execution steps are: 
		Load
			phase 1
			document-header-time-startup
						scripts inserted into index.htm are executed
						they prepare main methods, game definition hierachy, event handlers,
			phase 2 -
			window.onload-time-startup
						executes on window.onload event,
							gio.session.init.entry();
								finalizes base definitions: gdef.procs.spawn_base_game_and_dress();
								other tasks: game def. load, albums load, ...
								...
								picks up default game or and loads its default collection from data sources,
								if all collections are failed, default map is displayed
								ggi.control_events();
								ggi.step_events();

		Play
			phase 3
			execution - user plays, creates maps, runs solver
			user-time-initializations
						user selects different collection or game and its data loads
						user creates maps


<a href="../diary/">Diary:</a>
	is a collection of step by step versions.
	They are snapshots of folder "play".

	1. It is good to have backup versions when current version is
	   overengineered and one can fork from earlier ...
	2. Diary is a storage of abandoned ideas. Not every good idea can find its way to a final.

	For example, version 49 does not use css and images for dynamic "beautified" select box
	control. Can be a base for future browsers, with good CSS3 support.

	For example, in version 34, /var/www/bgame/gio/diary/34/games/sokoban/config.js
	has clear layout for tiles_map. This is a basic internal format for map
	which is used at least till verions 53, but it is not documented and abandoned later.


T O D O s: 

 * in non-db-mode, editing a map adds map text and preserves former garbage map
   instead of modifying garbage map
 * can take other collection's skin only if direct path is assigned to image=
 * dresses are not inhereited between albums and games:
	only from-default is inherited and 
	collection-dress is inherited from albums-dress

 * Buttons and controls GUI
     add or modify images feature is not yet added for controls and buttons
     some work required to imagefy scroll bars and drop down-button.
     works for FF and Webkit,  round corners not always work in IE 9	
     no scroll event handler, cannot use mouse wheel
     not all elements exist
       scroll slider is missed
       buttons are not visibly pushed, when clicked, only hover effect works 	
     Opera not always works when control is used in the game: http://landkey.net/gio/gio/bs/index.htm
     Needs better documentation beyond supplied examples.






You are welcome.

</div>


</body></html>

