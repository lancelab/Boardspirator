(function( $ ){ 	var tp  =  $.fn.tp$  =  $.fn.tp$ || {};	
					var gio =  tp.gio    =  tp.gio   || {};
	
	//keep this file as a doc. reference: has options for child configs, don't uncomment

	gio.base_settings={
		nam 		: 'Colorban',
		path 		: 'games/colorban',
		isabstract	: true,
		/*
		//If to set them now: they can shine through:
		collections : [
			{	path				:'sokoban/grigoriev/grigr2002_colored_idea.txt',
				title				: 'Long Trip',
				skip_non_map_lines	: false, //true - to put all maps into one board, optional
				map_title_source	:'comment' //options: title,comment
			},
			{	path: 'colorban/kirillov/intro.txt',
				title				: 'Intro',
				map_title_source	:'title'
			}
		],
		*/


		default_collection_ix	:0,
		/*
		//If to set them now: they can shine through:
		links	:	[
			{title:'<a href="http://www.ne.jp/asahi/ai/yoshio/sokoban/handmade/index.html">Yoshio Murase and Masato Hiramatsu. Handmade.</a>'},
			{title:'<a href="http://www.ne.jp/asahi/ai/yoshio/sokoban/auto52/index.html">Yoshio Murase. Autogenerated.</a>'},
			{title:'<a href="http://www.sourcecode.se/sokoban/levels.php">Possibly enough for one human life ...</a>'},
			{title:'<a href="http://users.bentonrea.com/~sasquatch/sokoban/">Sokoban puzzles by David W. Skinner</a>'}
		],
		*/

		////////////////////////////////////////////////////
		//s p e c i f y  r u l e s
		//==================================================
		DEEPNESS_LIMIT	:1,	//how many boxes can be pushed
		herd_size		:0, //flag. >0 for flock behaviour
		//interact		:{}, //optional
		activity_role	:{
							ground		: 'frozen'
		},

		interact_rules	:{
			blocking_policy:true,
			non_blocks:{ground : true}
		},
		//==================================================
		//s p e c i f y  r u l e s
		////////////////////////////////////////////////////




		//////////////////////// GUI /////////////////////////////////
		tile	:{ width : 25, height: 25 },
		style	:{	play:{
							backgroundImage:'background.png',
							backgroundColor:''
					},

					parent:{
						backgroundImage:'',
						backgroundColor:'#000000'
					}
		}, 
		//////////////////////// GUI END /////////////////////////////////



		//////////////////////// INFO /////////////////////////////////
		//Has one macro: <%game.nam%>
		rules	:
			"the robot can push only one box with matching color\n"+
			"black, grey, white match any color for robot, box, and target\n",

		objective:
			"push all boxes into dark cells with matching color\n",

		story:
			"Our Hero, thr robot, walks through the maze and pushes the boxes to dark cells.",


		credits:
			"Sokoban game has been invented by Hiroyuki Imabayashi in 1981. Look in Wikipedia for detailed history.\n" +
			"Skin design, art, and story of #%game.nam%# is Copyright (c) 2011 Konstantin Kirillov under MIT license.\n"+
			"Any similarity with other games is incidental and not intentional.\n",
		//////////////////////// INFO END /////////////////////////////////


		//////////////// mask with human names ... ///////////////////////
		hname_table	:{ //optional
						hero_x	: 'robot'
		},
		///////////////////////////////////////////////////////////////////


		image_decoder	:{
					'ground':'ground.png'
		},
	



	////////////////////// functional part: ///////////////////////

	///////////////////////////////////////////////////////////////////////
	//Extra Rules. Make this game "herdy" - dependent on sheep leadership
	//=====================================================================
	herd_rules:function(moves,target_pos){
		var w;
		var game=this;
		var collection=game.collections[game.collections.ix];
		var gm=collection.maps[collection.map_ix];

		game.inside_deepnes_ring=null;
		if(moves.length===1)return {pos:target_pos, moves:moves};//no change
		
		var round=gm.rounds[gm.rounds.ix];
		var pos=round.pos;

		var original_punit=moves[1].punit;
		var colony=gm.colonies[original_punit.colony_ix];

		var neighbour_moves=[];

		//auxiliary:
		var is_in_herd=function(xtest,ytest){ 
			return 	Math.abs(xtest-original_punit.x)<=game.herd_size &&
					Math.abs(ytest-original_punit.y)<=game.herd_size;
		};

		//auxiliary:
		game.inside_deepnes_ring=function(colony_ix,unit_ix)
		{
			var pu=pos[colony_ix][unit_ix];
			return is_in_herd(pu.x,pu.y)
		};

			
		var move=moves[1];
		var skipped={};
		skipped[colony.ix+' '+original_punit.ix]=true;

		//look for neighbour peers:
		tp.core.each(pos[colony.ix],function(dummy, npeer){
					if(npeer.ix === original_punit.ix) return true;
					if(skipped[colony.ix+' '+npeer.ix]) return true;

					//=============================================
					//If neighbour is set to be moved, skip it:
					var neighbour_will_be_moved=false;
					tp.core.each(neighbour_moves,function(move_ix,move){
						if(npeer.ix === move.punit.ix){
							neighbour_will_be_moved=true;
							//c onsle.log(	'neigbour '+colony.nam+' '+npeer.ix+
							//				' which is in x,y '+npeer.x+','+npeer.y+
							//				' is already moving. Skip it');
							return false;
						}
					});
					if(neighbour_will_be_moved) return true;
					//=============================================


					//c onsole.log('true peer');
					if(is_in_herd(npeer.x,npeer.y)){

						//peer is a neigbour, try to move it
						//c onsole.log('Trying to move neigbour '+colony.nam+' '+npeer.ix+ ' which is in x,y '+npeer.x+','+npeer.y);

						var new_position={pos:null,moves:[]};
						var msg=gio.check_collision(
								target_pos,colony.ix,npeer.ix,
								move.direction,new_position,1,{}
						);
						if(!msg){
							gio.cons_add(
								gio.human_name(colony,npeer.ix)+
								' (found in '+npeer.x+','+npeer.y+') follows the leader, '+
								gio.human_name(colony,original_punit.ix)+'...');
							neighbour_moves=neighbour_moves.concat(new_position.moves);
							target_pos=new_position.pos;
						}else{
							gio.cons_add(gio.human_name(colony,npeer.ix)+
								' cannot follow the leader, '+
								gio.human_name(colony,original_punit.ix)+
								'. '+msg+'');
						}
						skipped[colony.ix+' '+npeer.ix]=true;
					}
		});//tp.each pos
		game.inside_deepnes_ring=null;
		return {pos:target_pos, moves:moves.concat(neighbour_moves)};
	},
	//=====================================================================
	//Extra Rules. Make this game "herdy" - dependend on box leadership
	///////////////////////////////////////////////////////////////////////


		human_name:function(internal){	return this.hname_table[internal] || internal; },

		//=====================================
		// maps.
		//-------------------------------------
		// default if no file:
		default_maps_text :	"Default Map Test\n"+
							"\n"+
							"\t# # # # # # # # # # # #\r\n"+
							"# - @ a b c d . . . #\n"+
							"# - . . . . . - - - #\n"+
							"# # # # # # # #",

		maps_decoder	: function(data){ return gio['colorban_maps_decoder'].decode(this,data); },
		load_maps		: function(){ gio.load_maps(this); },
		//-------------------------------------
		// maps.
		//=====================================

		//add name to the credit:
		init_help	: function(){
			this.credits=this.credits.replace(/#%game\.nam%#/g,this.nam);
		}
	};
	

	//This function automates data generation:
	//It is exectuded immediately:
	(function(game){
	
		//Setup number of colors here:
		//Perhaps these colors would be enough:...
		var colors=game.colors=['x','a','b','c','d','e','f','g','h','i'];
		game.wall_map_symbols=['x','j','k','l','m','n','o','p','q','r'];

		var hero	=game.hero=[];					
		var box		=game.box=[];
		var target	=game.target=[];
		var wall	=game.wall=[];
		game.breed_color_ix={};



		////////////////////////////////////////////////////
		//s p e c i f y  r u l e s
		//==================================================

		game.interact=game.interact || {};
		(function(){
			var itr=game.interact;
			for(var i=0; i<colors.length; i++){
				var c=colors[i];
				var h=hero[i]	='hero_'+ c;		//init color heros
				var b=box[i]	='box_'+ c;			//init color boxes
				var t=target[i]	='target_' + c;		//init color targets
				var llaw=wall[i]	='wall_' + c;	//init color walls
				game.breed_color_ix[h]=i;
				game.breed_color_ix[b]=i;
				game.breed_color_ix[t]=i;
				itr[h]={};							//init color heros interaction
				itr[b]={};							//init color boxes interaction
				itr[h][b]='push';  					//color hero can push boxes only of own color
				itr[b][b]='push';					//color box can push boxes only of own color
				if(i)itr[hero[0]][b]='push';		//blackhero can push every box
				game.interact_rules.non_blocks[t]=true;	//targets block nothing

				game.activity_role[t]='frozen';
				game.activity_role[llaw]='frozen';
				game.activity_role[h]='active';
				game.activity_role[b]='passive';
			}
		})();


		//===================================
		//This function is optional.
		//Test is position winning. Returns eigther 'won' or 'playing'.
		game.won_or_not=function(){ return gio.colorban_is_game_won(); };

		//==================================================
		//s p e c i f y  r u l e s
		////////////////////////////////////////////////////


	})(gio.base_settings);

})(jQuery);


